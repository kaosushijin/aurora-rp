# GENAI.TXT - AI CONTEXT REFERENCE FOR DEVNAME RPG CLIENT
================================================================================
**CRITICAL NOTICE**: This document serves as the primary reference for generative AI to understand the complete project scope beyond its active context window. It enforces module boundaries and prevents regressions when modifying functions that affect multiple modules. Always consult this document before making changes that could ripple across the codebase.

## PROJECT OVERVIEW
Terminal-based RPG storytelling client using Large Language Models via MCP (Model Context Protocol). 
Architecture: Hub-and-spoke pattern with centralized orchestration through `orch.py`.
Status: Remodularization in progress - method signature fixes completed, window creation issue pending.

## CURRENT PROJECT STATE (Updated: September 11, 2025)
- **Architecture**: Hub-and-spoke pattern implemented and operational
- **Method Signatures**: All ncui.py method calls corrected to match uilib.py interfaces
- **File Structure**: All 8 primary modules consolidated in root directory
- **Dependencies**: Python 3.8+, curses, httpx (optional for LLM communication)
- **Status**: Debugging phase - window creation failure preventing UI display

### CURRENT ISSUE STATUS
- ✅ **Method Signature Fixes**: All completed (insert_char, update_window_height, etc.)
- ✅ **Import Path Corrections**: Module imports working correctly
- ✅ **Debug Logger Interface**: Standardized across all modules
- ❌ **Window Creation**: Curses returning NULL - terminal compatibility issue
- ❌ **UI Display**: Black screen with cursor - no visual interface yet

### IMMEDIATE NEXT STEPS
1. **Terminal Compatibility**: Investigate curses window creation failure
2. **Layout Validation**: Verify LayoutGeometry calculations produce valid dimensions
3. **Terminal Requirements**: Check minimum size validation and terminal type support
4. **Fallback Handling**: Implement graceful degradation for unsupported terminals

## COMPLETE MODULE REGISTRY AND INTERCONNECTS

### FILE STRUCTURE (All in root directory)
```
aurora-rp/
├── main.py              # Entry point, prompt management, debug logger
├── orch.py              # Central hub orchestrator - ONLY module calling mcp.py
├── mcp.py               # LLM communication - accessed ONLY by orch.py
├── ncui.py              # Pure UI controller (imports uilib.py) - RECENTLY FIXED
├── uilib.py             # Consolidated UI components library
├── emm.py               # Enhanced memory manager
├── sme.py               # Story momentum engine  
├── sem.py               # Semantic analysis engine
├── critrules.prompt     # Core rules (REQUIRED)
├── lowrules.prompt      # Additional rules (optional)
├── companion.prompt     # Companion definitions (optional)
├── genai.txt            # This reference document
└── legacyref/           # Legacy code reference (read-only, do not modify)
```

### MODULE INTERCONNECTION MATRIX

#### main.py
**Purpose**: Application entry, prompt management, debug logging initialization
**Imports**: `orch.Orchestrator`
**Exports**: `DebugLogger`, `PromptManager`, `DevNameRPGClient`
**Data Sent**: 
- To orch.py: `config` dict, `loaded_prompts` dict, `debug_logger` object
**Data Received**: 
- From orch.py: Integer exit code
**Critical Functions**:
- `load_and_optimize_prompts()`: Condenses prompts to 5000 token budget
- `validate_prompt_files()`: Ensures critrules.prompt exists in root directory
- `DebugLogger.debug(message, category)`: Standardized logging interface
**Dependencies**: Python 3.8+, asyncio, pathlib
**File Paths**: All prompts loaded from same directory as Python files

#### orch.py (CENTRAL HUB)
**Purpose**: Central orchestration of all service modules
**Imports**: `ncui`, `emm`, `sme`, `sem`, `mcp`
**Exports**: `Orchestrator`, `OrchestrationState`, `OrchestrationPhase`
**Data Sent**:
- To ncui.py: Display messages, UI commands via callback
- To emm.py: Messages for storage, memory operations
- To sme.py: Story state updates, analysis triggers
- To sem.py: Analysis requests via orchestrator callback
- To mcp.py: LLM request payloads (EXCLUSIVE ACCESS)
**Data Received**:
- From ncui.py: User input strings, UI events, shutdown requests
- From emm.py: Message history, memory state, conversation context
- From sme.py: Momentum analysis results, antagonist state
- From sem.py: Semantic categorization results
- From mcp.py: LLM responses, error states
**Critical Functions**:
- `initialize_modules()`: Sets up all service modules with callbacks
- `_handle_ui_callback()`: Main coordination point
- `_process_user_input()`: Routes input through processing pipeline
- `_make_llm_request()`: ONLY function that calls mcp.py
- `_trigger_periodic_analysis()`: Manages 15-message analysis cycles
**Threading**: Background analysis thread for non-blocking operations
**Debug Logging**: Uses helper methods `_log_debug()`, `_log_error()`

#### ncui.py (RECENTLY FIXED)
**Purpose**: Pure UI controller and event dispatcher
**Imports**: `uilib` (consolidated UI components)
**Exports**: `NCursesUIController`, `UIEvent`, `UIState`
**Data Sent**: User input strings, UI events, shutdown requests  
**Data Received**: Display messages, UI commands via orchestrator callback
**Critical Functions**:
- `run()`: Main UI event loop
- `_handle_input()`: Input processing and validation
- `_refresh_all_windows()`: Coordinate UI refresh through uilib
- `_handle_character()`: Uses insert_char() method (FIXED)
- `_handle_scroll_keys()`: Uses handle_line_scroll/handle_page_scroll methods (FIXED)
**Dependencies**: curses, uilib components
**Threading**: Main thread only, no direct threading operations
**Recent Fixes**: All method signatures corrected to match uilib.py interfaces
**Current Issue**: Window creation failing with curses NULL return

#### uilib.py
**Purpose**: Consolidated UI components library (replaces multiple nci_*.py files)
**Imports**: curses
**Exports**: `TerminalManager`, `MultiLineInput`, `ScrollManager`, `DisplayManager`, `ColorManager`
**Components**:
- `TerminalManager`: Dynamic coordinate system and layout geometry
- `MultiLineInput`: Multi-line input with cursor navigation and word wrapping
  - Methods: insert_char(), handle_enter(), update_max_width()
- `ScrollManager`: Scroll position management with bounds checking
  - Methods: update_window_height(), handle_line_scroll(), handle_page_scroll()
- `DisplayManager`: Message formatting and display rendering
- `ColorManager`: Theme switching and color management
**Features**: 
- Dynamic coordinate system prevents layout bugs
- Responsive terminal geometry handling
- Intelligent submission detection (double-enter or sentence-ending punctuation)
- Three built-in color schemes (classic/dark/bright)
**Dependencies**: curses
**Interface Compatibility**: All method signatures verified with ncui.py

#### mcp.py
**Purpose**: LLM communication via Model Context Protocol (HTTP-based)
**Imports**: None (leaf module)
**Exports**: `MCPClient`, `MCPRequestConfig`, `MCPResponse`
**Access Pattern**: EXCLUSIVELY called by orch.py - no other modules may import
**Data Sent**: LLM responses, error states, connection status
**Data Received**: LLM request payloads with prompts and context
**Critical Functions**:
- `make_request()`: Core LLM communication with 5-strategy JSON parsing
- `build_messages()`: Formats conversation for LLM context
- `_parse_response_content()`: Handles multiple response format strategies
**Dependencies**: httpx, asyncio, json
**Error Handling**: Graceful fallbacks, network timeout handling

#### emm.py
**Purpose**: Enhanced memory manager with semantic categorization
**Imports**: None (leaf module for storage)
**Exports**: `EnhancedMemoryManager`, `Message`, `MessageType`
**Data Sent**: Message history, memory state, conversation context
**Data Received**: Messages for storage, categorization updates
**Critical Functions**:
- `add_message()`: Thread-safe message storage with auto-save
- `get_conversation_for_mcp()`: Format messages for LLM requests
- `save_conversation()`: Atomic file operations with backup creation
- `get_condensation_candidates()`: Identify messages for LLM condensation
- `update_momentum_state()`: Persist story state from sme.py
**Threading**: Uses threading.Lock for all file operations
**Dependencies**: json, threading, pathlib
**Auto-save**: Background thread maintains state without blocking UI

#### sme.py  
**Purpose**: Story momentum engine with narrative pressure tracking
**Imports**: None (leaf module for analysis)
**Exports**: `StoryMomentumEngine`, `MomentumState`, `PressureType`
**Data Sent**: Momentum analysis results, antagonist state
**Data Received**: Story state updates, analysis triggers from orchestrator
**Critical Functions**:
- `analyze_momentum()`: Comprehensive LLM narrative analysis every 15 messages
- `update_pressure()`: Dynamic pressure tracking with floor ratcheting  
- `generate_antagonist()`: Quality-validated antagonist creation
- `get_momentum_state()`: Current story state for persistence
**Analysis Cycle**: Triggers every 15 messages via orchestrator
**Dependencies**: None (communicates via orchestrator callbacks)
**Threading**: Background LLM analysis to prevent UI blocking

#### sem.py
**Purpose**: Semantic analysis engine for message categorization  
**Imports**: None (leaf module for analysis)
**Exports**: `SemanticAnalysisEngine`, `ContentCategory`, `AnalysisResult`
**Data Sent**: Semantic categorization results
**Data Received**: Analysis requests via orchestrator callback
**Critical Functions**:
- `categorize_message()`: LLM-powered semantic categorization
- `analyze_content_importance()`: Determine condensation priority
- `batch_categorize()`: Efficient multi-message processing
**Categories**: character_focused, plot_advancing, world_building, meta_discussion, etc.
**Dependencies**: None (communicates via orchestrator callbacks)
**Threading**: Background processing to prevent UI blocking

## DEBUGGING STATUS AND KNOWN ISSUES

### RESOLVED ISSUES ✅
1. **Method Signature Mismatches**: All ncui.py calls now match uilib.py interfaces
   - ScrollManager: update_height() → update_window_height()
   - MultiLineInput: insert_character() → insert_char()
   - MultiLineInput: reset_for_width() → update_max_width()
   - MultiLineInput: get_display_lines() now called with required parameters
   - ScrollManager: scroll_up/scroll_down → handle_line_scroll/handle_page_scroll

2. **Import Path Issues**: All modules importing correctly from root directory
3. **Debug Logger**: Standardized method-based pattern across all modules

### CURRENT ISSUE ❌
**Window Creation Failure**: `curses function returned NULL`
- **Symptom**: Black screen with cursor in top-left, unresponsive
- **Log Evidence**: `[17:17:16.137] NCUI: ERROR: Window creation failed: curses function returned NULL`
- **Analysis**: curses.newwin() returning NULL suggests invalid window dimensions or terminal incompatibility
- **Potential Causes**:
  - LayoutGeometry calculations producing invalid coordinates (negative/zero dimensions)
  - Terminal size below minimum requirements (80x24)
  - Terminal type not supporting required curses features
  - Coordinate arithmetic errors in window positioning

### DEBUGGING PRIORITIES
1. **Layout Validation**: Add bounds checking to LayoutGeometry calculations
2. **Terminal Compatibility**: Verify terminal type and feature support
3. **Dimension Logging**: Log all window creation parameters before curses.newwin() calls
4. **Fallback Handling**: Implement graceful degradation for incompatible terminals

## VERSION HISTORY

### Current Version (Latest Commit - September 11, 2025)
- **Architecture**: Complete hub-and-spoke implementation
- **Status**: Method signature fixes completed, debugging window creation
- **Progress**: All ncui.py interface calls corrected to match uilib.py
- **Next Phase**: Terminal compatibility and window creation debugging

### Previous Working Version (legacyref/)
- **Architecture**: Direct module interconnections with multiple nci_*.py files
- **Status**: Fully functional interface with working curses display
- **Purpose**: Preserved for reference and emergency rollback
- **Usage**: Read-only reference, do not modify

### Major Changes from Legacy
- **Centralized Control**: All coordination through orch.py hub
- **Exclusive LLM Access**: Only orch.py calls mcp.py
- **Standardized Logging**: Consistent debug interface across modules
- **Flat File Structure**: All modules in root directory
- **Enhanced UI**: Consolidated uilib.py with better components
- **Method Standardization**: All interface calls verified and corrected

## USAGE INSTRUCTIONS

### Basic Operation
- Run `python main.py` to start with configuration auto-loading
- Use `python main.py --debug` for comprehensive logging
- Ensure critrules.prompt exists in root directory (required)
- companion.prompt and lowrules.prompt are optional
- Terminal minimum size: 80x24 characters

### Current Limitations
- UI display not functional due to window creation issue
- Input processing working but not visible
- All backend modules (orch, emm, sme, sem, mcp) operational
- Debug logging fully functional

### Debug Features
- Comprehensive logging of all module interactions
- Method signature validation logging
- Window creation failure diagnostics
- Layout calculation tracking
- Terminal compatibility checking

## NEXT DEVELOPMENT PHASE

### Immediate Tasks
1. **Window Creation Debug**: Add detailed logging to _create_windows() method
2. **Layout Validation**: Verify LayoutGeometry produces valid dimensions
3. **Terminal Compatibility**: Check curses feature requirements
4. **Error Handling**: Implement fallback for unsupported terminals

### Testing Priorities
1. **Layout Calculations**: Verify all coordinates are positive and within bounds
2. **Terminal Types**: Test across different terminal emulators
3. **Size Validation**: Ensure minimum terminal size requirements
4. **Graceful Degradation**: Fallback to text-only mode if curses fails

---
**END OF GENAI.TXT** - Last Updated: September 11, 2025 - Method Signature Fix Phase Complete
**Remember**: This document is the authoritative source for understanding module interactions and current debugging status. The hub-and-spoke architecture is complete and method signatures are corrected - focus is now on terminal compatibility and window creation debugging.
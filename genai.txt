# GENAI.TXT - AI CONTEXT REFERENCE FOR DEVNAME RPG CLIENT
================================================================================
**CRITICAL NOTICE**: This document serves as the primary reference for generative AI to understand the complete project scope beyond its active context window. It enforces module boundaries and prevents regressions when modifying functions that affect multiple modules. Always consult this document before making changes that could ripple across the codebase.

## PROJECT OVERVIEW
Terminal-based RPG storytelling client using Large Language Models via MCP (Model Context Protocol). 
Architecture: Hub-and-spoke pattern with centralized orchestration through `orch.py`.
Status: **UI SYSTEM RESTORATION PHASE 1 COMPLETE** - UI display functional, backend integration needed.

## CURRENT PROJECT STATE (Updated: September 11, 2025)
- **Architecture**: Hub-and-spoke pattern implemented and operational
- **UI System**: ✅ **FULLY FUNCTIONAL** - Terminal display, input processing, window management working
- **File Structure**: All 8 primary modules consolidated in root directory
- **Dependencies**: Python 3.8+, curses, httpx (optional for LLM communication)
- **Status**: UI Phase 1 complete, Phase 2 backend integration in progress

### COMPLETED MILESTONES
- ✅ **Terminal Size Detection**: Fixed 0x0 dimension issue, now detecting 236x64 correctly
- ✅ **Window Creation**: Fixed NULL return from curses.newwin(), all windows display properly
- ✅ **Layout Calculation**: calculate_box_layout() working with proper border handling
- ✅ **Method Signatures**: All ncui.py calls corrected to match uilib.py interfaces
- ✅ **Import Structure**: All modules importing correctly from root directory
- ✅ **Color Support**: Theme system operational
- ✅ **Input Processing**: Multi-line input, cursor navigation, text entry working
- ✅ **Display System**: Message display, scrolling, window refresh operational

### CURRENT ISSUE STATUS
- ✅ **UI Infrastructure**: Complete and functional
- ✅ **Window Management**: All three windows (Story, Input, Status) display correctly
- ✅ **User Input**: Text entry, cursor movement, basic commands working
- ❌ **Backend Integration**: SemanticAnalysisEngine missing `validate_input()` method
- ❌ **Input Processing Pipeline**: Cannot process user input due to missing method

### IMMEDIATE NEXT STEPS
1. **Add `validate_input()` method** to SemanticAnalysisEngine (sem.py)
2. **Test complete input processing pipeline** from UI through orchestrator
3. **Verify message display and response handling**
4. **Test UI commands** (/help, /clear, /stats, /theme, etc.)

## CURRENT MODULE ARCHITECTURE

### Primary Modules

**main.py** - Application coordination, prompt management, lifecycle control
- `PromptManager`: LLM-powered prompt condensation within token budgets
- `DevNameRPGClient`: Main application coordinator with signal handling
- `ApplicationConfig`: Hardcoded configuration values (no file creation)
- **Status**: ✅ Operational, loading prompts correctly

**orch.py** - Central orchestrator, hub of hub-and-spoke architecture
- Manages all module communication and coordination
- Only module with direct access to mcp.py
- Handles UI callbacks and input processing
- **Status**: ✅ Operational, missing SemanticAnalysisEngine.validate_input() method

**ncui.py** - NCurses UI Controller, pure display management
- `NCursesUIController`: Main UI coordination class
- Terminal management, window creation, input handling
- **Status**: ✅ Fully operational, all method signature fixes complete
- **Key Fix**: Added return True/False to _create_windows() method

**uilib.py** - Consolidated UI library, all UI components
- `calculate_box_layout()`: Fixed window dimension calculations
- `TerminalManager`: Dynamic terminal size management
- `ColorManager`, `ScrollManager`, `MultiLineInput`: All operational
- **Status**: ✅ Fully operational
- **Key Fixes**: Added textwrap import, scroll_to_bottom() method, corrected layout calculations

### Supporting Modules

**emm.py** - Enhanced Memory Manager
- Message storage and retrieval
- **Status**: ✅ Operational (not currently tested but imports correctly)

**sme.py** - Story Momentum Engine  
- Narrative progression and antagonist management
- **Status**: ✅ Operational (not currently tested but imports correctly)

**sem.py** - Semantic Analysis Engine
- Input validation and semantic processing
- **Status**: ❌ Missing `validate_input()` method (immediate blocker)

**mcp.py** - MCP Client for LLM communication
- Model Context Protocol implementation
- **Status**: ✅ Operational (hub-and-spoke access only)

## TECHNICAL IMPLEMENTATION DETAILS

### UI System Architecture (COMPLETED)
- **Window Layout**: 90/10 split between Story and Input windows, Status line at bottom
- **Border System**: ASCII borders with proper inner/outer coordinate separation
- **Input System**: Multi-line input with cursor navigation, word wrapping
- **Display System**: Message display with timestamps, color themes, scrolling
- **Terminal Management**: Dynamic resize handling, minimum size validation (80x24)

### Key Technical Fixes Applied
1. **Terminal Size Detection**: Fixed TerminalManager initialization sequence
2. **Window Creation**: Fixed missing return statements in _create_windows()
3. **Layout Calculation**: Ported working coordinate logic from legacy system
4. **Method Signatures**: Corrected all ncui.py calls to match uilib.py
5. **Import Structure**: Added missing calculate_box_layout import
6. **Scroll Management**: Added missing scroll_to_bottom() method

### File Structure (CURRENT)
```
aurora-rp/
├── main.py              # ✅ Operational - Entry point, prompt loading
├── orch.py              # ✅ Operational - Central orchestrator 
├── ncui.py              # ✅ Operational - UI controller
├── uilib.py             # ✅ Operational - UI library
├── emm.py               # ✅ Operational - Memory manager
├── sme.py               # ✅ Operational - Momentum engine  
├── sem.py               # ❌ Missing validate_input() - Semantic engine
├── mcp.py               # ✅ Operational - MCP client
├── critrules.prompt     # ✅ Present - Core game rules
├── lowrules.prompt      # ✅ Present - Additional rules
├── companion.prompt     # Optional - Missing but not required
└── genai.txt            # Updated with current status
```

## USAGE INSTRUCTIONS

### Current Functionality
- **Run**: `python main.py --debug` for comprehensive logging
- **UI**: Fully functional terminal interface with input/output windows
- **Input**: Type naturally, Enter creates new lines, double-enter attempts submission
- **Commands**: /help, /clear, /stats, /theme commands implemented
- **Navigation**: Arrow keys for cursor movement, PgUp/PgDn for scrolling
- **Exit**: Escape key or /quit command

### Current Limitations
- **Input Processing**: User input cannot be processed due to missing validate_input() method
- **LLM Integration**: Cannot test LLM responses until input processing works
- **Backend Features**: Memory, semantic analysis, momentum analysis untested

### Debug Features (FUNCTIONAL)
- Comprehensive logging of all UI operations
- Window creation and layout calculation tracking  
- Terminal compatibility and resize handling
- Method signature validation logging
- Input handling and display refresh logging

## NEXT DEVELOPMENT PHASE

### Phase 2: Backend Integration (CURRENT)
1. **Add Missing Method**: Implement validate_input() in SemanticAnalysisEngine
2. **Test Input Pipeline**: Verify user input flows through orchestrator properly
3. **Message Display**: Ensure LLM responses display correctly in Story window
4. **Command Testing**: Verify all /commands work properly

### Phase 3: Feature Validation (UPCOMING)
1. **Memory System**: Test message storage and retrieval
2. **Semantic Analysis**: Verify input categorization and processing
3. **Momentum System**: Test story progression and antagonist management
4. **LLM Integration**: Validate MCP communication and response handling

### Phase 4: Polish and Optimization (FUTURE)
1. **UI Enhancements**: Fine-tune display formatting and colors
2. **Performance**: Optimize refresh rates and memory usage
3. **Error Handling**: Improve resilience and error reporting
4. **Documentation**: Update user guides and technical documentation

## VERSION HISTORY

### Current Version (September 11, 2025) - UI RESTORATION COMPLETE
- **Architecture**: Hub-and-spoke pattern fully implemented
- **Status**: UI Phase 1 complete, backend integration Phase 2 in progress
- **Major Achievement**: Full UI functionality restored with proper window management
- **Next Milestone**: Complete backend integration for full application functionality

### Previous Working Version (legacyref/)
- **Architecture**: Direct module interconnections with multiple nci_*.py files
- **Status**: Fully functional but deprecated architecture
- **Purpose**: Reference for coordinate calculations and feature completeness
- **Usage**: Read-only reference, do not modify

### Major Changes from Legacy
- **UI Consolidation**: All nci_*.py files merged into single uilib.py
- **Method Standardization**: All interface calls verified and corrected
- **Layout System**: Improved coordinate calculations with proper validation
- **Error Handling**: Enhanced window creation and terminal compatibility
- **Debug System**: Comprehensive logging throughout all operations

## CRITICAL SUCCESS FACTORS

### What Made UI Restoration Successful
1. **Systematic Debugging**: Added logging at each step to identify exact failure points
2. **Legacy Reference**: Used working legacyref/ code as authoritative source for calculations
3. **Methodical Fixes**: Fixed one issue at a time (imports → methods → layout → windows)
4. **Validation**: Added bounds checking and error handling at critical points
5. **Architecture Preservation**: Maintained hub-and-spoke pattern throughout fixes

### Key Lessons for Future Development
- **Always add comprehensive logging** for debugging complex UI issues
- **Validate all dimensions** before passing to curses functions
- **Test method signatures** thoroughly when refactoring between modules
- **Preserve working logic** from legacy code when migrating architectures
- **Fix systematically** rather than attempting multiple simultaneous changes

## TECHNICAL NOTES FOR AI DEVELOPMENT

### Module Communication Pattern (ENFORCED)
- **Hub**: orch.py coordinates all operations
- **Spokes**: All other modules communicate only through orch.py
- **UI**: ncui.py sends callbacks to orch.py, receives commands back
- **LLM**: Only orch.py calls mcp.py directly
- **Isolation**: No direct module-to-module communication outside hub

### Code Quality Standards
- **Logging**: All operations must include debug logging with module prefix
- **Error Handling**: All functions must handle exceptions gracefully
- **Return Values**: All functions must return explicit True/False for success/failure
- **Documentation**: All major functions must include purpose and parameter documentation
- **Testing**: All changes must be verified with debug logging before deployment

### Critical Implementation Details
- **Terminal Minimum**: 80x24 characters required
- **Layout Split**: 90% output, 10% input window allocation
- **Border Handling**: Separate outer (with borders) and inner (text area) coordinates
- **Window Creation**: Validate all dimensions > 0 before curses.newwin() calls
- **Input Processing**: Multi-line support with word wrapping and cursor navigation

---
Last Updated: September 11, 2025, 17:45 UTC
Project State: UI Phase 1 Complete, Backend Integration Phase 2 In Progress
Next Milestone: Complete SemanticAnalysisEngine.validate_input() implementation